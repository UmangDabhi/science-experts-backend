service: scienceexperts-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 1024
  timeout: 29

  # Environment variables
  environment:
    NODE_ENV: production
    DB_HOST: ${env:DB_HOST}
    DB_PORT: ${env:DB_PORT}
    DB_USERNAME: ${env:DB_USERNAME}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_DATABASE: ${env:DB_DATABASE}
    DB_SSL: ${env:DB_SSL, 'true'}
    JWT_SECRET: ${env:JWT_SECRET}
    JWT_EXPIRATION: ${env:JWT_EXPIRATION, '7d'}
    AWS_S3_BUCKET: ${env:AWS_S3_BUCKET}
    REDIS_HOST: ${env:REDIS_HOST, ''}
    REDIS_PORT: ${env:REDIS_PORT, '6379'}
    EMAIL_HOST: ${env:EMAIL_HOST, ''}
    EMAIL_PORT: ${env:EMAIL_PORT, '587'}
    EMAIL_USER: ${env:EMAIL_USER, ''}
    EMAIL_PASS: ${env:EMAIL_PASS, ''}
    EMAIL_FROM: ${env:EMAIL_FROM, ''}
    BACKEND_URL: ${env:BACKEND_URL, ''}
    FRONTEND_URL: ${env:FRONTEND_URL, ''}

  # VPC Configuration (required for Aurora access)
  # Update these values with your actual VPC configuration
  vpc:
    securityGroupIds:
      - ${env:LAMBDA_SECURITY_GROUP_ID}
    subnetIds:
      - ${env:LAMBDA_SUBNET_ID_1}
      - ${env:LAMBDA_SUBNET_ID_2}

  # IAM Role permissions
  iam:
    role:
      statements:
        # S3 access for file uploads
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::${env:AWS_S3_BUCKET}/*

        # CloudWatch Logs
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - arn:aws:logs:*:*:*

        # VPC Network Interfaces (required for VPC access)
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
          Resource: '*'

        # SES (if using for emails)
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: '*'

  # API Gateway configuration
  apiGateway:
    # Enable binary media types for file uploads
    binaryMediaTypes:
      - '*/*'
    # CORS configuration
    cors:
      origin: ${env:FRONTEND_URL, '*'}
      headers:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
      allowCredentials: true

# Functions
functions:
  api:
    handler: dist/lambda.handler
    events:
      - http:
          method: ANY
          path: /
          cors: true
      - http:
          method: ANY
          path: /{proxy+}
          cors: true
    # Reserved concurrency (optional, prevents unlimited scaling)
    # reservedConcurrency: 10

    # Provisioned concurrency (optional, keeps instances warm)
    # provisionedConcurrency: 1

# Plugins
plugins:
  - serverless-offline

# Package configuration
package:
  individually: false
  patterns:
    - '!node_modules/**'
    - '!src/**'
    - '!test/**'
    - '!.git/**'
    - '!.vscode/**'
    - '!coverage/**'
    - '!.env*'
    - 'dist/**'
    - 'node_modules/**'

# Custom configuration
custom:
  serverless-offline:
    httpPort: 3000
    stage: dev
    prefix: ''

  # Warmup configuration (optional)
  # warmup:
  #   default:
  #     enabled: true
  #     events:
  #       - schedule: rate(5 minutes)
  #     concurrency: 1

# Resources (optional CloudFormation resources)
resources:
  Resources:
    # API Gateway CloudWatch Role
    ApiGatewayCloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  Outputs:
    ApiUrl:
      Description: 'API Gateway endpoint URL'
      Value:
        Fn::Join:
          - ''
          - - https://
            - Ref: ApiGatewayRestApi
            - .execute-api.
            - ${self:provider.region}
            - .amazonaws.com/
            - ${self:provider.stage}
